//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Recycle.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class RecycleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, BOOLOP=71, COMPOP=72, EQOP=73, 
		UNOP=74, INTNUM=75, LETT=76, OPEN=77, CLOSE=78, WS=79, ANY=80;
	public const int
		RULE_var = 0, RULE_game = 1, RULE_setup = 2, RULE_stage = 3, RULE_scoring = 4, 
		RULE_endcondition = 5, RULE_action = 6, RULE_multiaction = 7, RULE_multiaction2 = 8, 
		RULE_condact = 9, RULE_agg = 10, RULE_let = 11, RULE_declare = 12, RULE_playercreate = 13, 
		RULE_teamcreate = 14, RULE_deckcreate = 15, RULE_deck = 16, RULE_teams = 17, 
		RULE_attribute = 18, RULE_initpoints = 19, RULE_awards = 20, RULE_subaward = 21, 
		RULE_cycleaction = 22, RULE_setaction = 23, RULE_setstraction = 24, RULE_incaction = 25, 
		RULE_decaction = 26, RULE_moveaction = 27, RULE_copyaction = 28, RULE_removeaction = 29, 
		RULE_shuffleaction = 30, RULE_turnaction = 31, RULE_repeat = 32, RULE_card = 33, 
		RULE_actual = 34, RULE_rawstorage = 35, RULE_pointstorage = 36, RULE_strstorage = 37, 
		RULE_cstorage = 38, RULE_memstorage = 39, RULE_memset = 40, RULE_tuple = 41, 
		RULE_partition = 42, RULE_locpre = 43, RULE_locdesc = 44, RULE_who = 45, 
		RULE_whop = 46, RULE_whot = 47, RULE_whodesc = 48, RULE_owner = 49, RULE_teamp = 50, 
		RULE_other = 51, RULE_typed = 52, RULE_collection = 53, RULE_strcollection = 54, 
		RULE_cstoragecollection = 55, RULE_range = 56, RULE_filter = 57, RULE_attrcomp = 58, 
		RULE_cardatt = 59, RULE_boolean = 60, RULE_intop = 61, RULE_add = 62, 
		RULE_mult = 63, RULE_subtract = 64, RULE_mod = 65, RULE_divide = 66, RULE_exponent = 67, 
		RULE_triangular = 68, RULE_fibonacci = 69, RULE_random = 70, RULE_sizeof = 71, 
		RULE_maxof = 72, RULE_minof = 73, RULE_sortof = 74, RULE_unionof = 75, 
		RULE_intersectof = 76, RULE_disjunctionof = 77, RULE_sum = 78, RULE_score = 79, 
		RULE_int = 80, RULE_str = 81, RULE_namegr = 82;
	public static readonly string[] ruleNames = {
		"var", "game", "setup", "stage", "scoring", "endcondition", "action", 
		"multiaction", "multiaction2", "condact", "agg", "let", "declare", "playercreate", 
		"teamcreate", "deckcreate", "deck", "teams", "attribute", "initpoints", 
		"awards", "subaward", "cycleaction", "setaction", "setstraction", "incaction", 
		"decaction", "moveaction", "copyaction", "removeaction", "shuffleaction", 
		"turnaction", "repeat", "card", "actual", "rawstorage", "pointstorage", 
		"strstorage", "cstorage", "memstorage", "memset", "tuple", "partition", 
		"locpre", "locdesc", "who", "whop", "whot", "whodesc", "owner", "teamp", 
		"other", "typed", "collection", "strcollection", "cstoragecollection", 
		"range", "filter", "attrcomp", "cardatt", "boolean", "intop", "add", "mult", 
		"subtract", "mod", "divide", "exponent", "triangular", "fibonacci", "random", 
		"sizeof", "maxof", "minof", "sortof", "unionof", "intersectof", "disjunctionof", 
		"sum", "score", "int", "str", "namegr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'''", "'game'", "'setup'", "'stage'", "'player'", "'team'", "'scoring'", 
		"'min'", "'max'", "'end'", "'choice'", "'do'", "'any'", "'all'", "'let'", 
		"'declare'", "'create'", "'players'", "'teams'", "'deck'", "','", "'set'", 
		"'cycle'", "'next'", "'current'", "'previous'", "'inc'", "'dec'", "'move'", 
		"'remember'", "'forget'", "'shuffle'", "'turn'", "'pass'", "'repeat'", 
		"'top'", "'bottom'", "'actual'", "'sto'", "'points'", "'str'", "'tuples'", 
		"'using'", "'partition'", "'vloc'", "'iloc'", "'hloc'", "'mem'", "'owner'", 
		"'other'", "'range'", "'..'", "'filter'", "'cardatt'", "'+'", "'*'", "'-'", 
		"'%'", "'//'", "'^'", "'tri'", "'fib'", "'random'", "'size'", "'sort'", 
		"'union'", "'intersect'", "'disjunction'", "'sum'", "'score'", null, null, 
		null, "'not'", null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "BOOLOP", 
		"COMPOP", "EQOP", "UNOP", "INTNUM", "LETT", "OPEN", "CLOSE", "WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Recycle.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RecycleParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class VarContext : ParserRuleContext {
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 0, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(T__0);
			State = 167; namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		public ScoringContext scoring() {
			return GetRuleContext<ScoringContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext[] declare() {
			return GetRuleContexts<DeclareContext>();
		}
		public DeclareContext declare(int i) {
			return GetRuleContext<DeclareContext>(i);
		}
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitGame(this);
		}
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 2, RULE_game);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(OPEN);
			State = 170; Match(T__1);
			State = 174;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 171; declare();
					}
					} 
				}
				State = 176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 177; setup();
			State = 180;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 180;
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 178; multiaction();
						}
						break;
					case 2:
						{
						State = 179; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 182;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 184; scoring();
			State = 185; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public PlayercreateContext playercreate() {
			return GetRuleContext<PlayercreateContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public DeckcreateContext[] deckcreate() {
			return GetRuleContexts<DeckcreateContext>();
		}
		public DeckcreateContext deckcreate(int i) {
			return GetRuleContext<DeckcreateContext>(i);
		}
		public RepeatContext[] repeat() {
			return GetRuleContexts<RepeatContext>();
		}
		public RepeatContext repeat(int i) {
			return GetRuleContext<RepeatContext>(i);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetup(this);
		}
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 4, RULE_setup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(OPEN);
			State = 188; Match(T__2);
			State = 189; playercreate();
			State = 191;
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 190; teamcreate();
				}
				break;
			}
			State = 200;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 193; Match(OPEN);
					State = 196;
					switch (TokenStream.La(1)) {
					case T__16:
						{
						State = 194; deckcreate();
						}
						break;
					case T__34:
						{
						State = 195; repeat();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 198; Match(CLOSE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 202;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 204; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStage(this);
		}
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 6, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; Match(OPEN);
			State = 207; Match(T__3);
			State = 208;
			_la = TokenStream.La(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 209; endcondition();
			State = 212;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 212;
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 210; multiaction();
						}
						break;
					case 2:
						{
						State = 211; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 214;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 216; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoringContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScoring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScoring(this);
		}
	}

	[RuleVersion(0)]
	public ScoringContext scoring() {
		ScoringContext _localctx = new ScoringContext(Context, State);
		EnterRule(_localctx, 8, RULE_scoring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(OPEN);
			State = 219; Match(T__6);
			State = 220;
			_la = TokenStream.La(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 221; @int();
			State = 222; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterEndcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitEndcondition(this);
		}
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 10, RULE_endcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(OPEN);
			State = 225; Match(T__9);
			State = 226; boolean();
			State = 227; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public InitpointsContext initpoints() {
			return GetRuleContext<InitpointsContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public DeckcreateContext deckcreate() {
			return GetRuleContext<DeckcreateContext>(0);
		}
		public CycleactionContext cycleaction() {
			return GetRuleContext<CycleactionContext>(0);
		}
		public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 12, RULE_action);
		try {
			State = 248;
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229; Match(OPEN);
				State = 243;
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 230; initpoints();
					}
					break;
				case 2:
					{
					State = 231; teamcreate();
					}
					break;
				case 3:
					{
					State = 232; deckcreate();
					}
					break;
				case 4:
					{
					State = 233; cycleaction();
					}
					break;
				case 5:
					{
					State = 234; setaction();
					}
					break;
				case 6:
					{
					State = 235; moveaction();
					}
					break;
				case 7:
					{
					State = 236; copyaction();
					}
					break;
				case 8:
					{
					State = 237; incaction();
					}
					break;
				case 9:
					{
					State = 238; decaction();
					}
					break;
				case 10:
					{
					State = 239; removeaction();
					}
					break;
				case 11:
					{
					State = 240; turnaction();
					}
					break;
				case 12:
					{
					State = 241; shuffleaction();
					}
					break;
				case 13:
					{
					State = 242; repeat();
					}
					break;
				}
				State = 245; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction(this);
		}
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 14, RULE_multiaction);
		try {
			int _alt;
			State = 274;
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 250; Match(OPEN);
				State = 251; Match(T__10);
				State = 252; Match(OPEN);
				State = 254;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 253; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 256;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 258; Match(CLOSE);
				State = 259; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261; Match(OPEN);
				State = 262; Match(T__11);
				State = 263; Match(OPEN);
				State = 265;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 264; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 267;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 269; Match(CLOSE);
				State = 270; Match(CLOSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 272; agg();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 273; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiaction2Context : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public Multiaction2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction2(this);
		}
	}

	[RuleVersion(0)]
	public Multiaction2Context multiaction2() {
		Multiaction2Context _localctx = new Multiaction2Context(Context, State);
		EnterRule(_localctx, 16, RULE_multiaction2);
		try {
			int _alt;
			State = 289;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276; Match(OPEN);
				State = 277; Match(T__11);
				State = 278; Match(OPEN);
				State = 280;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 279; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 282;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 284; Match(CLOSE);
				State = 285; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 287; agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 288; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondactContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public Multiaction2Context multiaction2() {
			return GetRuleContext<Multiaction2Context>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condact; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCondact(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCondact(this);
		}
	}

	[RuleVersion(0)]
	public CondactContext condact() {
		CondactContext _localctx = new CondactContext(Context, State);
		EnterRule(_localctx, 18, RULE_condact);
		try {
			State = 303;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291; Match(OPEN);
				State = 292; boolean();
				State = 293; multiaction2();
				State = 294; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 296; multiaction2();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 297; Match(OPEN);
				State = 298; boolean();
				State = 299; action();
				State = 300; Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 302; action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public AggContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAgg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAgg(this);
		}
	}

	[RuleVersion(0)]
	public AggContext agg() {
		AggContext _localctx = new AggContext(Context, State);
		EnterRule(_localctx, 20, RULE_agg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; Match(OPEN);
			State = 306;
			_la = TokenStream.La(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 307; collection();
			State = 308; var();
			State = 313;
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 309; condact();
				}
				break;
			case 2:
				{
				State = 310; boolean();
				}
				break;
			case 3:
				{
				State = 311; cstorage();
				}
				break;
			case 4:
				{
				State = 312; rawstorage();
				}
				break;
			}
			State = 315; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 22, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; Match(OPEN);
			State = 318; Match(T__14);
			State = 319; typed();
			State = 320; var();
			State = 324;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 321; multiaction();
				}
				break;
			case 2:
				{
				State = 322; action();
				}
				break;
			case 3:
				{
				State = 323; condact();
				}
				break;
			}
			State = 326; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 24, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(OPEN);
			State = 329; Match(T__15);
			State = 330; typed();
			State = 331; var();
			State = 332; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayercreateContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public PlayercreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playercreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPlayercreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPlayercreate(this);
		}
	}

	[RuleVersion(0)]
	public PlayercreateContext playercreate() {
		PlayercreateContext _localctx = new PlayercreateContext(Context, State);
		EnterRule(_localctx, 26, RULE_playercreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; Match(OPEN);
			State = 335; Match(T__16);
			State = 336; Match(T__17);
			State = 339;
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 337; var();
				}
				break;
			case 2:
				{
				State = 338; @int();
				}
				break;
			}
			State = 341; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamcreateContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamcreate(this);
		}
	}

	[RuleVersion(0)]
	public TeamcreateContext teamcreate() {
		TeamcreateContext _localctx = new TeamcreateContext(Context, State);
		EnterRule(_localctx, 28, RULE_teamcreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(OPEN);
			State = 344; Match(T__16);
			State = 345; Match(T__18);
			State = 347;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 346; teams();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 349;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 351; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckcreateContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		public DeckcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeckcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeckcreate(this);
		}
	}

	[RuleVersion(0)]
	public DeckcreateContext deckcreate() {
		DeckcreateContext _localctx = new DeckcreateContext(Context, State);
		EnterRule(_localctx, 30, RULE_deckcreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(T__16);
			State = 354; Match(T__19);
			State = 355; cstorage();
			State = 356; deck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeck(this);
		}
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 32, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 358; Match(OPEN);
			State = 359; Match(T__19);
			State = 361;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 360; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 363;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 365; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeams(this);
		}
	}

	[RuleVersion(0)]
	public TeamsContext teams() {
		TeamsContext _localctx = new TeamsContext(Context, State);
		EnterRule(_localctx, 34, RULE_teams);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; Match(OPEN);
			State = 372;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 368; Match(INTNUM);
					State = 369; Match(T__20);
					}
					} 
				}
				State = 374;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 375; Match(INTNUM);
			State = 379;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 376; teams();
					}
					} 
				}
				State = 381;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 382; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 36, RULE_attribute);
		try {
			int _alt;
			State = 406;
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 384; Match(OPEN);
				State = 385; var();
				State = 386; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388; Match(OPEN);
				State = 394;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 389; namegr();
						State = 390; Match(T__20);
						}
						} 
					}
					State = 396;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				State = 397; namegr();
				State = 401;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 398; attribute();
						}
						} 
					}
					State = 403;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				}
				State = 404; Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitpointsContext : ParserRuleContext {
		public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public InitpointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initpoints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInitpoints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInitpoints(this);
		}
	}

	[RuleVersion(0)]
	public InitpointsContext initpoints() {
		InitpointsContext _localctx = new InitpointsContext(Context, State);
		EnterRule(_localctx, 38, RULE_initpoints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 408; Match(T__21);
			State = 409; pointstorage();
			State = 410; Match(OPEN);
			State = 412;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 411; awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 414;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 416; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubawardContext[] subaward() {
			return GetRuleContexts<SubawardContext>();
		}
		public SubawardContext subaward(int i) {
			return GetRuleContext<SubawardContext>(i);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAwards(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAwards(this);
		}
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 40, RULE_awards);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; Match(OPEN);
			State = 420;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 419; subaward();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 422;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 424; @int();
			State = 425; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubawardContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public StrContext[] str() {
			return GetRuleContexts<StrContext>();
		}
		public StrContext str(int i) {
			return GetRuleContext<StrContext>(i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public SubawardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subaward; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubaward(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubaward(this);
		}
	}

	[RuleVersion(0)]
	public SubawardContext subaward() {
		SubawardContext _localctx = new SubawardContext(Context, State);
		EnterRule(_localctx, 42, RULE_subaward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; Match(OPEN);
			State = 428; str();
			State = 434;
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 429; Match(OPEN);
				State = 430; str();
				State = 431; Match(CLOSE);
				}
				break;
			case 2:
				{
				State = 433; cardatt();
				}
				break;
			}
			State = 436; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleactionContext : ParserRuleContext {
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public CycleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCycleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCycleaction(this);
		}
	}

	[RuleVersion(0)]
	public CycleactionContext cycleaction() {
		CycleactionContext _localctx = new CycleactionContext(Context, State);
		EnterRule(_localctx, 44, RULE_cycleaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438; Match(T__22);
			State = 439;
			_la = TokenStream.La(1);
			if ( !(_la==T__23 || _la==T__24) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 444;
			switch (TokenStream.La(1)) {
			case OPEN:
				{
				State = 440; owner();
				}
				break;
			case T__24:
				{
				State = 441; Match(T__24);
				}
				break;
			case T__23:
				{
				State = 442; Match(T__23);
				}
				break;
			case T__25:
				{
				State = 443; Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetaction(this);
		}
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 46, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; Match(T__21);
			State = 447; rawstorage();
			State = 448; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetstractionContext : ParserRuleContext {
		public StrstorageContext strstorage() {
			return GetRuleContext<StrstorageContext>(0);
		}
		public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public SetstractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setstraction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetstraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetstraction(this);
		}
	}

	[RuleVersion(0)]
	public SetstractionContext setstraction() {
		SetstractionContext _localctx = new SetstractionContext(Context, State);
		EnterRule(_localctx, 48, RULE_setstraction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450; Match(T__21);
			State = 451; strstorage();
			State = 452; str();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIncaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIncaction(this);
		}
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 50, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; Match(T__26);
			State = 455; rawstorage();
			State = 456; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDecaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDecaction(this);
		}
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 52, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; Match(T__27);
			State = 459; rawstorage();
			State = 460; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMoveaction(this);
		}
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 54, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462; Match(T__28);
			State = 463; card();
			State = 464; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public CopyactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCopyaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCopyaction(this);
		}
	}

	[RuleVersion(0)]
	public CopyactionContext copyaction() {
		CopyactionContext _localctx = new CopyactionContext(Context, State);
		EnterRule(_localctx, 56, RULE_copyaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466; Match(T__29);
			State = 467; card();
			State = 468; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveactionContext : ParserRuleContext {
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public RemoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRemoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRemoveaction(this);
		}
	}

	[RuleVersion(0)]
	public RemoveactionContext removeaction() {
		RemoveactionContext _localctx = new RemoveactionContext(Context, State);
		EnterRule(_localctx, 58, RULE_removeaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470; Match(T__30);
			State = 471; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterShuffleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitShuffleaction(this);
		}
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 60, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; Match(T__31);
			State = 474; cstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTurnaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTurnaction(this);
		}
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 62, RULE_turnaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476; Match(T__32);
			State = 477; Match(T__33);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 64, RULE_repeat);
		try {
			State = 489;
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 479; Match(T__34);
				State = 480; @int();
				State = 481; action();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 483; Match(T__34);
				State = 484; Match(T__13);
				State = 485; Match(OPEN);
				State = 486; moveaction();
				State = 487; Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		public MinofContext minof() {
			return GetRuleContext<MinofContext>(0);
		}
		public ActualContext actual() {
			return GetRuleContext<ActualContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCard(this);
		}
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 66, RULE_card);
		try {
			State = 504;
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 491; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 492; maxof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 493; minof();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 494; actual();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 495; Match(OPEN);
				State = 499;
				switch (TokenStream.La(1)) {
				case T__35:
					{
					State = 496; Match(T__35);
					}
					break;
				case T__36:
					{
					State = 497; Match(T__36);
					}
					break;
				case T__0:
				case INTNUM:
				case OPEN:
					{
					State = 498; @int();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 501; cstorage();
				State = 502; Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterActual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitActual(this);
		}
	}

	[RuleVersion(0)]
	public ActualContext actual() {
		ActualContext _localctx = new ActualContext(Context, State);
		EnterRule(_localctx, 68, RULE_actual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506; Match(OPEN);
			State = 507; Match(T__37);
			State = 508; card();
			State = 509; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRawstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRawstorage(this);
		}
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 70, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511; Match(OPEN);
			State = 515;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 512; var();
				}
				break;
			case T__1:
				{
				State = 513; Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 514; who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 517; Match(T__38);
			State = 518; str();
			State = 519; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public PointstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPointstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPointstorage(this);
		}
	}

	[RuleVersion(0)]
	public PointstorageContext pointstorage() {
		PointstorageContext _localctx = new PointstorageContext(Context, State);
		EnterRule(_localctx, 72, RULE_pointstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521; Match(OPEN);
			State = 525;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 522; var();
				}
				break;
			case T__1:
				{
				State = 523; Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 524; who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 527; Match(T__39);
			State = 528; str();
			State = 529; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public StrstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStrstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStrstorage(this);
		}
	}

	[RuleVersion(0)]
	public StrstorageContext strstorage() {
		StrstorageContext _localctx = new StrstorageContext(Context, State);
		EnterRule(_localctx, 74, RULE_strstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531; Match(OPEN);
			State = 535;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 532; var();
				}
				break;
			case T__1:
				{
				State = 533; Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 534; who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 537; Match(T__40);
			State = 538; str();
			State = 539; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstorageContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		public IntersectofContext intersectof() {
			return GetRuleContext<IntersectofContext>(0);
		}
		public DisjunctionofContext disjunctionof() {
			return GetRuleContext<DisjunctionofContext>(0);
		}
		public SortofContext sortof() {
			return GetRuleContext<SortofContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		public LocdescContext locdesc() {
			return GetRuleContext<LocdescContext>(0);
		}
		public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		public CstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstorage(this);
		}
	}

	[RuleVersion(0)]
	public CstorageContext cstorage() {
		CstorageContext _localctx = new CstorageContext(Context, State);
		EnterRule(_localctx, 76, RULE_cstorage);
		try {
			State = 554;
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 541; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 542; unionof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 543; intersectof();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 544; disjunctionof();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 545; sortof();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 546; filter();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 547; Match(OPEN);
				State = 548; locpre();
				State = 549; locdesc();
				State = 550; str();
				State = 551; Match(CLOSE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 553; memstorage();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MemstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemstorage(this);
		}
	}

	[RuleVersion(0)]
	public MemstorageContext memstorage() {
		MemstorageContext _localctx = new MemstorageContext(Context, State);
		EnterRule(_localctx, 78, RULE_memstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556; Match(OPEN);
			State = 560;
			switch (TokenStream.La(1)) {
			case T__35:
				{
				State = 557; Match(T__35);
				}
				break;
			case T__36:
				{
				State = 558; Match(T__36);
				}
				break;
			case T__0:
			case INTNUM:
			case OPEN:
				{
				State = 559; @int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 562; memset();
			State = 563; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemsetContext : ParserRuleContext {
		public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public PartitionContext partition() {
			return GetRuleContext<PartitionContext>(0);
		}
		public MemsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemset(this);
		}
	}

	[RuleVersion(0)]
	public MemsetContext memset() {
		MemsetContext _localctx = new MemsetContext(Context, State);
		EnterRule(_localctx, 80, RULE_memset);
		try {
			State = 567;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 565; tuple();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 566; partition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 82, RULE_tuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569; Match(OPEN);
			State = 570; Match(T__41);
			State = 571; @int();
			State = 572; cstorage();
			State = 573; Match(T__42);
			State = 574; pointstorage();
			State = 575; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public PartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPartition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPartition(this);
		}
	}

	[RuleVersion(0)]
	public PartitionContext partition() {
		PartitionContext _localctx = new PartitionContext(Context, State);
		EnterRule(_localctx, 84, RULE_partition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 577; Match(OPEN);
			State = 578; Match(T__43);
			State = 585;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 579; agg();
				}
				break;
			case 2:
				{
				State = 581;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 580; cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 583;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 587; str();
			State = 588; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpreContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public LocpreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpre; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocpre(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocpre(this);
		}
	}

	[RuleVersion(0)]
	public LocpreContext locpre() {
		LocpreContext _localctx = new LocpreContext(Context, State);
		EnterRule(_localctx, 86, RULE_locpre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 590; var();
				}
				break;
			case T__1:
				{
				State = 591; Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 592; whop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocdescContext : ParserRuleContext {
		public LocdescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locdesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocdesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocdesc(this);
		}
	}

	[RuleVersion(0)]
	public LocdescContext locdesc() {
		LocdescContext _localctx = new LocdescContext(Context, State);
		EnterRule(_localctx, 88, RULE_locdesc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWho(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWho(this);
		}
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 90, RULE_who);
		try {
			State = 599;
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 597; whot();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 598; whop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhopContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public WhopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhop(this);
		}
	}

	[RuleVersion(0)]
	public WhopContext whop() {
		WhopContext _localctx = new WhopContext(Context, State);
		EnterRule(_localctx, 92, RULE_whop);
		try {
			State = 607;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 601; Match(OPEN);
				State = 602; whodesc();
				State = 603; Match(T__4);
				State = 604; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 606; owner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhotContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeampContext teamp() {
			return GetRuleContext<TeampContext>(0);
		}
		public WhotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whot; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhot(this);
		}
	}

	[RuleVersion(0)]
	public WhotContext whot() {
		WhotContext _localctx = new WhotContext(Context, State);
		EnterRule(_localctx, 94, RULE_whot);
		try {
			State = 615;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 609; Match(OPEN);
				State = 610; whodesc();
				State = 611; Match(T__5);
				State = 612; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 614; teamp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhodescContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public WhodescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whodesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhodesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhodesc(this);
		}
	}

	[RuleVersion(0)]
	public WhodescContext whodesc() {
		WhodescContext _localctx = new WhodescContext(Context, State);
		EnterRule(_localctx, 96, RULE_whodesc);
		try {
			State = 621;
			switch (TokenStream.La(1)) {
			case T__0:
			case INTNUM:
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 617; @int();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 618; Match(T__25);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 3);
				{
				State = 619; Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 4);
				{
				State = 620; Match(T__24);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOwner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOwner(this);
		}
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 98, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623; Match(OPEN);
			State = 624; Match(T__48);
			State = 625; card();
			State = 626; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeampContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamp(this);
		}
	}

	[RuleVersion(0)]
	public TeampContext teamp() {
		TeampContext _localctx = new TeampContext(Context, State);
		EnterRule(_localctx, 100, RULE_teamp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628; Match(OPEN);
			State = 629; Match(T__5);
			State = 630; whop();
			State = 631; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOther(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOther(this);
		}
	}

	[RuleVersion(0)]
	public OtherContext other() {
		OtherContext _localctx = new OtherContext(Context, State);
		EnterRule(_localctx, 102, RULE_other);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633; Match(OPEN);
			State = 634; Match(T__49);
			State = 635;
			_la = TokenStream.La(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 636; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTyped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTyped(this);
		}
	}

	[RuleVersion(0)]
	public TypedContext typed() {
		TypedContext _localctx = new TypedContext(Context, State);
		EnterRule(_localctx, 104, RULE_typed);
		try {
			State = 643;
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 638; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 639; @int();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 640; boolean();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 641; str();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 642; collection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public StrcollectionContext strcollection() {
			return GetRuleContext<StrcollectionContext>(0);
		}
		public CstoragecollectionContext cstoragecollection() {
			return GetRuleContext<CstoragecollectionContext>(0);
		}
		public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		public OtherContext other() {
			return GetRuleContext<OtherContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 106, RULE_collection);
		try {
			State = 655;
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 645; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 646; cstorage();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 647; strcollection();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 648; cstoragecollection();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 649; Match(T__4);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 650; Match(T__5);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 651; whot();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 652; other();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 653; range();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 654; filter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrcollectionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public StrcollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strcollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStrcollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStrcollection(this);
		}
	}

	[RuleVersion(0)]
	public StrcollectionContext strcollection() {
		StrcollectionContext _localctx = new StrcollectionContext(Context, State);
		EnterRule(_localctx, 108, RULE_strcollection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 657; Match(OPEN);
			State = 663;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 658; namegr();
					State = 659; Match(T__20);
					}
					} 
				}
				State = 665;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			State = 666; namegr();
			State = 667; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstoragecollectionContext : ParserRuleContext {
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public CstoragecollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstoragecollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstoragecollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstoragecollection(this);
		}
	}

	[RuleVersion(0)]
	public CstoragecollectionContext cstoragecollection() {
		CstoragecollectionContext _localctx = new CstoragecollectionContext(Context, State);
		EnterRule(_localctx, 110, RULE_cstoragecollection);
		try {
			State = 672;
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 669; memset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 670; agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 671; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 112, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674; Match(OPEN);
			State = 675; Match(T__50);
			State = 676; @int();
			State = 677; Match(T__51);
			State = 678; @int();
			State = 679; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 114, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681; Match(OPEN);
			State = 682; Match(T__52);
			State = 683; collection();
			State = 684; var();
			State = 685; boolean();
			State = 686; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrcompContext : ParserRuleContext {
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardattContext[] cardatt() {
			return GetRuleContexts<CardattContext>();
		}
		public CardattContext cardatt(int i) {
			return GetRuleContext<CardattContext>(i);
		}
		public AttrcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrcomp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttrcomp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttrcomp(this);
		}
	}

	[RuleVersion(0)]
	public AttrcompContext attrcomp() {
		AttrcompContext _localctx = new AttrcompContext(Context, State);
		EnterRule(_localctx, 116, RULE_attrcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688; Match(EQOP);
			State = 689; cardatt();
			State = 690; cardatt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardatt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardatt(this);
		}
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 118, RULE_cardatt);
		try {
			State = 699;
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 692; str();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 693; Match(OPEN);
				State = 694; Match(T__53);
				State = 695; str();
				State = 696; card();
				State = 697; Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ITerminalNode BOOLOP() { return GetToken(RecycleParser.BOOLOP, 0); }
		public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public ITerminalNode UNOP() { return GetToken(RecycleParser.UNOP, 0); }
		public WhopContext[] whop() {
			return GetRuleContexts<WhopContext>();
		}
		public WhopContext whop(int i) {
			return GetRuleContext<WhopContext>(i);
		}
		public WhotContext[] whot() {
			return GetRuleContexts<WhotContext>();
		}
		public WhotContext whot(int i) {
			return GetRuleContext<WhotContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 120, RULE_boolean);
		try {
			int _alt;
			State = 733;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 701; Match(OPEN);
				State = 728;
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 702; Match(BOOLOP);
					State = 703; boolean();
					State = 705;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 704; boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 707;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				case 2:
					{
					State = 709; intop();
					State = 710; @int();
					State = 711; @int();
					}
					break;
				case 3:
					{
					State = 713; attrcomp();
					}
					break;
				case 4:
					{
					State = 714; Match(EQOP);
					State = 715; card();
					State = 716; card();
					}
					break;
				case 5:
					{
					State = 718; Match(UNOP);
					State = 719; boolean();
					}
					break;
				case 6:
					{
					State = 720; Match(EQOP);
					State = 721; whop();
					State = 722; whop();
					}
					break;
				case 7:
					{
					State = 724; Match(EQOP);
					State = 725; whot();
					State = 726; whot();
					}
					break;
				}
				State = 730; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 732; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		public ITerminalNode COMPOP() { return GetToken(RecycleParser.COMPOP, 0); }
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntop(this);
		}
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 122, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			_la = TokenStream.La(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 124, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737; Match(OPEN);
			State = 738; Match(T__54);
			State = 739; @int();
			State = 740; @int();
			State = 741; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 126, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743; Match(OPEN);
			State = 744; Match(T__55);
			State = 745; @int();
			State = 746; @int();
			State = 747; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 128, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749; Match(OPEN);
			State = 750; Match(T__56);
			State = 751; @int();
			State = 752; @int();
			State = 753; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 130, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 755; Match(OPEN);
			State = 756; Match(T__57);
			State = 757; @int();
			State = 758; @int();
			State = 759; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 132, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761; Match(OPEN);
			State = 762; Match(T__58);
			State = 763; @int();
			State = 764; @int();
			State = 765; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ExponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterExponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitExponent(this);
		}
	}

	[RuleVersion(0)]
	public ExponentContext exponent() {
		ExponentContext _localctx = new ExponentContext(Context, State);
		EnterRule(_localctx, 134, RULE_exponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767; Match(OPEN);
			State = 768; Match(T__59);
			State = 769; @int();
			State = 770; @int();
			State = 771; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriangularContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TriangularContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triangular; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTriangular(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTriangular(this);
		}
	}

	[RuleVersion(0)]
	public TriangularContext triangular() {
		TriangularContext _localctx = new TriangularContext(Context, State);
		EnterRule(_localctx, 136, RULE_triangular);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773; Match(OPEN);
			State = 774; Match(T__60);
			State = 775; @int();
			State = 776; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FibonacciContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FibonacciContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fibonacci; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterFibonacci(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitFibonacci(this);
		}
	}

	[RuleVersion(0)]
	public FibonacciContext fibonacci() {
		FibonacciContext _localctx = new FibonacciContext(Context, State);
		EnterRule(_localctx, 138, RULE_fibonacci);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778; Match(OPEN);
			State = 779; Match(T__61);
			State = 780; @int();
			State = 781; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RandomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_random; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRandom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRandom(this);
		}
	}

	[RuleVersion(0)]
	public RandomContext random() {
		RandomContext _localctx = new RandomContext(Context, State);
		EnterRule(_localctx, 140, RULE_random);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783; Match(OPEN);
			State = 784; Match(T__62);
			State = 785; @int();
			State = 786; Match(T__51);
			State = 788;
			_la = TokenStream.La(1);
			if (_la==T__0 || _la==INTNUM || _la==OPEN) {
				{
				State = 787; @int();
				}
			}

			State = 790; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 142, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 792; Match(OPEN);
			State = 793; Match(T__63);
			State = 797;
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 794; var();
				}
				break;
			case 2:
				{
				State = 795; cstorage();
				}
				break;
			case 3:
				{
				State = 796; memset();
				}
				break;
			}
			State = 799; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMaxof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMaxof(this);
		}
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 144, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801; Match(OPEN);
			State = 802; Match(T__8);
			State = 803; cstorage();
			State = 804; Match(T__42);
			State = 805; pointstorage();
			State = 806; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MinofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMinof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMinof(this);
		}
	}

	[RuleVersion(0)]
	public MinofContext minof() {
		MinofContext _localctx = new MinofContext(Context, State);
		EnterRule(_localctx, 146, RULE_minof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808; Match(OPEN);
			State = 809; Match(T__7);
			State = 810; cstorage();
			State = 811; Match(T__42);
			State = 812; pointstorage();
			State = 813; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SortofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSortof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSortof(this);
		}
	}

	[RuleVersion(0)]
	public SortofContext sortof() {
		SortofContext _localctx = new SortofContext(Context, State);
		EnterRule(_localctx, 148, RULE_sortof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815; Match(OPEN);
			State = 816; Match(T__64);
			State = 817; cstorage();
			State = 818; Match(T__42);
			State = 819; pointstorage();
			State = 820; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterUnionof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitUnionof(this);
		}
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 150, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 822; Match(OPEN);
			State = 823; Match(T__65);
			State = 830;
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 824; agg();
				}
				break;
			case 2:
				{
				State = 826;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 825; cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 828;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 832; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntersectofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggContext[] agg() {
			return GetRuleContexts<AggContext>();
		}
		public AggContext agg(int i) {
			return GetRuleContext<AggContext>(i);
		}
		public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public IntersectofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intersectof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntersectof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntersectof(this);
		}
	}

	[RuleVersion(0)]
	public IntersectofContext intersectof() {
		IntersectofContext _localctx = new IntersectofContext(Context, State);
		EnterRule(_localctx, 152, RULE_intersectof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 834; Match(OPEN);
			State = 835; Match(T__66);
			State = 842;
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 836; agg();
				}
				break;
			case 2:
				{
				State = 838;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 837; cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 840;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 850;
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 844; agg();
				}
				break;
			case 2:
				{
				State = 846;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 845; cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 848;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 852; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggContext[] agg() {
			return GetRuleContexts<AggContext>();
		}
		public AggContext agg(int i) {
			return GetRuleContext<AggContext>(i);
		}
		public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public DisjunctionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunctionof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDisjunctionof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDisjunctionof(this);
		}
	}

	[RuleVersion(0)]
	public DisjunctionofContext disjunctionof() {
		DisjunctionofContext _localctx = new DisjunctionofContext(Context, State);
		EnterRule(_localctx, 154, RULE_disjunctionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 854; Match(OPEN);
			State = 855; Match(T__67);
			State = 862;
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 856; agg();
				}
				break;
			case 2:
				{
				State = 858;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 857; cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 860;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 870;
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 864; agg();
				}
				break;
			case 2:
				{
				State = 866;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 865; cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 868;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 872; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 156, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874; Match(OPEN);
			State = 875; Match(T__68);
			State = 876; cstorage();
			State = 877; Match(T__42);
			State = 878; pointstorage();
			State = 879; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScore(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScore(this);
		}
	}

	[RuleVersion(0)]
	public ScoreContext score() {
		ScoreContext _localctx = new ScoreContext(Context, State);
		EnterRule(_localctx, 158, RULE_score);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881; Match(OPEN);
			State = 882; Match(T__69);
			State = 883; card();
			State = 884; Match(T__42);
			State = 885; pointstorage();
			State = 886; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public ExponentContext exponent() {
			return GetRuleContext<ExponentContext>(0);
		}
		public TriangularContext triangular() {
			return GetRuleContext<TriangularContext>(0);
		}
		public FibonacciContext fibonacci() {
			return GetRuleContext<FibonacciContext>(0);
		}
		public RandomContext random() {
			return GetRuleContext<RandomContext>(0);
		}
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public ScoreContext score() {
			return GetRuleContext<ScoreContext>(0);
		}
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 160, RULE_int);
		try {
			int _alt;
			State = 907;
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 888; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 889; @sizeof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 890; mult();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 891; subtract();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 892; mod();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 893; add();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 894; divide();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 895; exponent();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 896; triangular();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 897; fibonacci();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 898; random();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 899; sum();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 900; rawstorage();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 901; score();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 903;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 902; Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 905;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrContext : ParserRuleContext {
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public StrstorageContext strstorage() {
			return GetRuleContext<StrstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public StrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_str; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStr(this);
		}
	}

	[RuleVersion(0)]
	public StrContext str() {
		StrContext _localctx = new StrContext(Context, State);
		EnterRule(_localctx, 162, RULE_str);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912;
			switch (TokenStream.La(1)) {
			case LETT:
				{
				State = 909; namegr();
				}
				break;
			case OPEN:
				{
				State = 910; strstorage();
				}
				break;
			case T__0:
				{
				State = 911; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		public ITerminalNode[] LETT() { return GetTokens(RecycleParser.LETT); }
		public ITerminalNode LETT(int i) {
			return GetToken(RecycleParser.LETT, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterNamegr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitNamegr(this);
		}
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 164, RULE_namegr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 915;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 914; Match(LETT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 917;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3R\x39A\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x3\x2\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x3\a\x3\xAF\n\x3\f\x3\xE\x3\xB2\v\x3\x3\x3\x3\x3\x3\x3\x6\x3\xB7"+
		"\n\x3\r\x3\xE\x3\xB8\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\xC2"+
		"\n\x4\x3\x4\x3\x4\x3\x4\x5\x4\xC7\n\x4\x3\x4\x3\x4\x6\x4\xCB\n\x4\r\x4"+
		"\xE\x4\xCC\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x6\x5\xD7\n"+
		"\x5\r\x5\xE\x5\xD8\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x5\b\xF6\n\b\x3\b\x3\b\x3\b\x5\b\xFB\n\b\x3\t\x3"+
		"\t\x3\t\x3\t\x6\t\x101\n\t\r\t\xE\t\x102\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x6\t\x10C\n\t\r\t\xE\t\x10D\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x115\n"+
		"\t\x3\n\x3\n\x3\n\x3\n\x6\n\x11B\n\n\r\n\xE\n\x11C\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x5\n\x124\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x5\v\x132\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f"+
		"\x13C\n\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x147\n\r\x3"+
		"\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x5\xF\x156\n\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x6\x10\x15E"+
		"\n\x10\r\x10\xE\x10\x15F\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x12\x3\x12\x3\x12\x6\x12\x16C\n\x12\r\x12\xE\x12\x16D\x3\x12\x3"+
		"\x12\x3\x13\x3\x13\x3\x13\a\x13\x175\n\x13\f\x13\xE\x13\x178\v\x13\x3"+
		"\x13\x3\x13\a\x13\x17C\n\x13\f\x13\xE\x13\x17F\v\x13\x3\x13\x3\x13\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\x18B\n\x14"+
		"\f\x14\xE\x14\x18E\v\x14\x3\x14\x3\x14\a\x14\x192\n\x14\f\x14\xE\x14\x195"+
		"\v\x14\x3\x14\x3\x14\x5\x14\x199\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x6"+
		"\x15\x19F\n\x15\r\x15\xE\x15\x1A0\x3\x15\x3\x15\x3\x16\x3\x16\x6\x16\x1A7"+
		"\n\x16\r\x16\xE\x16\x1A8\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x5\x17\x1B5\n\x17\x3\x17\x3\x17\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x1BF\n\x18\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3!\x3!\x3!\x3\"\x3\"\x3\"\x3\""+
		"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x1EC\n\"\x3#\x3#\x3#\x3#\x3#\x3#\x3"+
		"#\x3#\x5#\x1F6\n#\x3#\x3#\x3#\x5#\x1FB\n#\x3$\x3$\x3$\x3$\x3$\x3%\x3%"+
		"\x3%\x3%\x5%\x206\n%\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3&\x5&\x210\n&\x3&\x3"+
		"&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x5\'\x21A\n\'\x3\'\x3\'\x3\'\x3\'\x3(\x3"+
		"(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x22D\n(\x3)\x3)\x3)"+
		"\x3)\x5)\x233\n)\x3)\x3)\x3)\x3*\x3*\x5*\x23A\n*\x3+\x3+\x3+\x3+\x3+\x3"+
		"+\x3+\x3+\x3,\x3,\x3,\x3,\x6,\x248\n,\r,\xE,\x249\x5,\x24C\n,\x3,\x3,"+
		"\x3,\x3-\x3-\x3-\x5-\x254\n-\x3.\x3.\x3/\x3/\x5/\x25A\n/\x3\x30\x3\x30"+
		"\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x262\n\x30\x3\x31\x3\x31\x3\x31\x3"+
		"\x31\x3\x31\x3\x31\x5\x31\x26A\n\x31\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32"+
		"\x270\n\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3"+
		"\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3"+
		"\x36\x3\x36\x5\x36\x286\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x292\n\x37\x3\x38\x3\x38\x3\x38\x3"+
		"\x38\a\x38\x298\n\x38\f\x38\xE\x38\x29B\v\x38\x3\x38\x3\x38\x3\x38\x3"+
		"\x39\x3\x39\x3\x39\x5\x39\x2A3\n\x39\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3;\x3"+
		";\x3;\x3;\x3;\x3;\x3;\x3<\x3<\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x5="+
		"\x2BE\n=\x3>\x3>\x3>\x3>\x6>\x2C4\n>\r>\xE>\x2C5\x3>\x3>\x3>\x3>\x3>\x3"+
		">\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x5>\x2DB\n>\x3>"+
		"\x3>\x3>\x5>\x2E0\n>\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x3@\x3\x41\x3\x41\x3"+
		"\x41\x3\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3"+
		"\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3"+
		"\x44\x3\x44\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x46\x3\x46\x3"+
		"\x46\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x3G\x3H\x3H\x3H\x3H\x3H\x5H\x317\n"+
		"H\x3H\x3H\x3I\x3I\x3I\x3I\x3I\x5I\x320\nI\x3I\x3I\x3J\x3J\x3J\x3J\x3J"+
		"\x3J\x3J\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3L\x3L\x3L\x3L\x3L\x3L\x3L\x3M\x3"+
		"M\x3M\x3M\x6M\x33D\nM\rM\xEM\x33E\x5M\x341\nM\x3M\x3M\x3N\x3N\x3N\x3N"+
		"\x6N\x349\nN\rN\xEN\x34A\x5N\x34D\nN\x3N\x3N\x6N\x351\nN\rN\xEN\x352\x5"+
		"N\x355\nN\x3N\x3N\x3O\x3O\x3O\x3O\x6O\x35D\nO\rO\xEO\x35E\x5O\x361\nO"+
		"\x3O\x3O\x6O\x365\nO\rO\xEO\x366\x5O\x369\nO\x3O\x3O\x3P\x3P\x3P\x3P\x3"+
		"P\x3P\x3P\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3Q\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x3R"+
		"\x3R\x3R\x3R\x3R\x3R\x3R\x3R\x6R\x38A\nR\rR\xER\x38B\x5R\x38E\nR\x3S\x3"+
		"S\x3S\x5S\x393\nS\x3T\x6T\x396\nT\rT\xET\x397\x3T\x19\xB0\xB8\xCC\xD8"+
		"\x102\x10D\x11C\x15F\x16D\x176\x17D\x18C\x193\x1A0\x1A8\x249\x299\x2C5"+
		"\x33E\x34A\x352\x35E\x366\x2U\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A"+
		"\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62"+
		"\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98"+
		"\x9A\x9C\x9E\xA0\xA2\xA4\xA6\x2\b\x3\x2\a\b\x3\x2\n\v\x3\x2\xF\x10\x3"+
		"\x2\x1A\x1B\x3\x2/\x32\x3\x2JK\x3D2\x2\xA8\x3\x2\x2\x2\x4\xAB\x3\x2\x2"+
		"\x2\x6\xBD\x3\x2\x2\x2\b\xD0\x3\x2\x2\x2\n\xDC\x3\x2\x2\x2\f\xE2\x3\x2"+
		"\x2\x2\xE\xFA\x3\x2\x2\x2\x10\x114\x3\x2\x2\x2\x12\x123\x3\x2\x2\x2\x14"+
		"\x131\x3\x2\x2\x2\x16\x133\x3\x2\x2\x2\x18\x13F\x3\x2\x2\x2\x1A\x14A\x3"+
		"\x2\x2\x2\x1C\x150\x3\x2\x2\x2\x1E\x159\x3\x2\x2\x2 \x163\x3\x2\x2\x2"+
		"\"\x168\x3\x2\x2\x2$\x171\x3\x2\x2\x2&\x198\x3\x2\x2\x2(\x19A\x3\x2\x2"+
		"\x2*\x1A4\x3\x2\x2\x2,\x1AD\x3\x2\x2\x2.\x1B8\x3\x2\x2\x2\x30\x1C0\x3"+
		"\x2\x2\x2\x32\x1C4\x3\x2\x2\x2\x34\x1C8\x3\x2\x2\x2\x36\x1CC\x3\x2\x2"+
		"\x2\x38\x1D0\x3\x2\x2\x2:\x1D4\x3\x2\x2\x2<\x1D8\x3\x2\x2\x2>\x1DB\x3"+
		"\x2\x2\x2@\x1DE\x3\x2\x2\x2\x42\x1EB\x3\x2\x2\x2\x44\x1FA\x3\x2\x2\x2"+
		"\x46\x1FC\x3\x2\x2\x2H\x201\x3\x2\x2\x2J\x20B\x3\x2\x2\x2L\x215\x3\x2"+
		"\x2\x2N\x22C\x3\x2\x2\x2P\x22E\x3\x2\x2\x2R\x239\x3\x2\x2\x2T\x23B\x3"+
		"\x2\x2\x2V\x243\x3\x2\x2\x2X\x253\x3\x2\x2\x2Z\x255\x3\x2\x2\x2\\\x259"+
		"\x3\x2\x2\x2^\x261\x3\x2\x2\x2`\x269\x3\x2\x2\x2\x62\x26F\x3\x2\x2\x2"+
		"\x64\x271\x3\x2\x2\x2\x66\x276\x3\x2\x2\x2h\x27B\x3\x2\x2\x2j\x285\x3"+
		"\x2\x2\x2l\x291\x3\x2\x2\x2n\x293\x3\x2\x2\x2p\x2A2\x3\x2\x2\x2r\x2A4"+
		"\x3\x2\x2\x2t\x2AB\x3\x2\x2\x2v\x2B2\x3\x2\x2\x2x\x2BD\x3\x2\x2\x2z\x2DF"+
		"\x3\x2\x2\x2|\x2E1\x3\x2\x2\x2~\x2E3\x3\x2\x2\x2\x80\x2E9\x3\x2\x2\x2"+
		"\x82\x2EF\x3\x2\x2\x2\x84\x2F5\x3\x2\x2\x2\x86\x2FB\x3\x2\x2\x2\x88\x301"+
		"\x3\x2\x2\x2\x8A\x307\x3\x2\x2\x2\x8C\x30C\x3\x2\x2\x2\x8E\x311\x3\x2"+
		"\x2\x2\x90\x31A\x3\x2\x2\x2\x92\x323\x3\x2\x2\x2\x94\x32A\x3\x2\x2\x2"+
		"\x96\x331\x3\x2\x2\x2\x98\x338\x3\x2\x2\x2\x9A\x344\x3\x2\x2\x2\x9C\x358"+
		"\x3\x2\x2\x2\x9E\x36C\x3\x2\x2\x2\xA0\x373\x3\x2\x2\x2\xA2\x38D\x3\x2"+
		"\x2\x2\xA4\x392\x3\x2\x2\x2\xA6\x395\x3\x2\x2\x2\xA8\xA9\a\x3\x2\x2\xA9"+
		"\xAA\x5\xA6T\x2\xAA\x3\x3\x2\x2\x2\xAB\xAC\aO\x2\x2\xAC\xB0\a\x4\x2\x2"+
		"\xAD\xAF\x5\x1A\xE\x2\xAE\xAD\x3\x2\x2\x2\xAF\xB2\x3\x2\x2\x2\xB0\xB1"+
		"\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB1\xB3\x3\x2\x2\x2\xB2\xB0\x3\x2\x2"+
		"\x2\xB3\xB6\x5\x6\x4\x2\xB4\xB7\x5\x10\t\x2\xB5\xB7\x5\b\x5\x2\xB6\xB4"+
		"\x3\x2\x2\x2\xB6\xB5\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xB9\x3\x2\x2"+
		"\x2\xB8\xB6\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBB\x5\n\x6\x2\xBB\xBC"+
		"\aP\x2\x2\xBC\x5\x3\x2\x2\x2\xBD\xBE\aO\x2\x2\xBE\xBF\a\x5\x2\x2\xBF\xC1"+
		"\x5\x1C\xF\x2\xC0\xC2\x5\x1E\x10\x2\xC1\xC0\x3\x2\x2\x2\xC1\xC2\x3\x2"+
		"\x2\x2\xC2\xCA\x3\x2\x2\x2\xC3\xC6\aO\x2\x2\xC4\xC7\x5 \x11\x2\xC5\xC7"+
		"\x5\x42\"\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC5\x3\x2\x2\x2\xC7\xC8\x3\x2\x2"+
		"\x2\xC8\xC9\aP\x2\x2\xC9\xCB\x3\x2\x2\x2\xCA\xC3\x3\x2\x2\x2\xCB\xCC\x3"+
		"\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2"+
		"\xCE\xCF\aP\x2\x2\xCF\a\x3\x2\x2\x2\xD0\xD1\aO\x2\x2\xD1\xD2\a\x6\x2\x2"+
		"\xD2\xD3\t\x2\x2\x2\xD3\xD6\x5\f\a\x2\xD4\xD7\x5\x10\t\x2\xD5\xD7\x5\b"+
		"\x5\x2\xD6\xD4\x3\x2\x2\x2\xD6\xD5\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8"+
		"\xD9\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\xDB\aP\x2"+
		"\x2\xDB\t\x3\x2\x2\x2\xDC\xDD\aO\x2\x2\xDD\xDE\a\t\x2\x2\xDE\xDF\t\x3"+
		"\x2\x2\xDF\xE0\x5\xA2R\x2\xE0\xE1\aP\x2\x2\xE1\v\x3\x2\x2\x2\xE2\xE3\a"+
		"O\x2\x2\xE3\xE4\a\f\x2\x2\xE4\xE5\x5z>\x2\xE5\xE6\aP\x2\x2\xE6\r\x3\x2"+
		"\x2\x2\xE7\xF5\aO\x2\x2\xE8\xF6\x5(\x15\x2\xE9\xF6\x5\x1E\x10\x2\xEA\xF6"+
		"\x5 \x11\x2\xEB\xF6\x5.\x18\x2\xEC\xF6\x5\x30\x19\x2\xED\xF6\x5\x38\x1D"+
		"\x2\xEE\xF6\x5:\x1E\x2\xEF\xF6\x5\x34\x1B\x2\xF0\xF6\x5\x36\x1C\x2\xF1"+
		"\xF6\x5<\x1F\x2\xF2\xF6\x5@!\x2\xF3\xF6\x5> \x2\xF4\xF6\x5\x42\"\x2\xF5"+
		"\xE8\x3\x2\x2\x2\xF5\xE9\x3\x2\x2\x2\xF5\xEA\x3\x2\x2\x2\xF5\xEB\x3\x2"+
		"\x2\x2\xF5\xEC\x3\x2\x2\x2\xF5\xED\x3\x2\x2\x2\xF5\xEE\x3\x2\x2\x2\xF5"+
		"\xEF\x3\x2\x2\x2\xF5\xF0\x3\x2\x2\x2\xF5\xF1\x3\x2\x2\x2\xF5\xF2\x3\x2"+
		"\x2\x2\xF5\xF3\x3\x2\x2\x2\xF5\xF4\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7"+
		"\xF8\aP\x2\x2\xF8\xFB\x3\x2\x2\x2\xF9\xFB\x5\x16\f\x2\xFA\xE7\x3\x2\x2"+
		"\x2\xFA\xF9\x3\x2\x2\x2\xFB\xF\x3\x2\x2\x2\xFC\xFD\aO\x2\x2\xFD\xFE\a"+
		"\r\x2\x2\xFE\x100\aO\x2\x2\xFF\x101\x5\x14\v\x2\x100\xFF\x3\x2\x2\x2\x101"+
		"\x102\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2\x102\x100\x3\x2\x2\x2\x103\x104"+
		"\x3\x2\x2\x2\x104\x105\aP\x2\x2\x105\x106\aP\x2\x2\x106\x115\x3\x2\x2"+
		"\x2\x107\x108\aO\x2\x2\x108\x109\a\xE\x2\x2\x109\x10B\aO\x2\x2\x10A\x10C"+
		"\x5\x14\v\x2\x10B\x10A\x3\x2\x2\x2\x10C\x10D\x3\x2\x2\x2\x10D\x10E\x3"+
		"\x2\x2\x2\x10D\x10B\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x110\aP\x2"+
		"\x2\x110\x111\aP\x2\x2\x111\x115\x3\x2\x2\x2\x112\x115\x5\x16\f\x2\x113"+
		"\x115\x5\x18\r\x2\x114\xFC\x3\x2\x2\x2\x114\x107\x3\x2\x2\x2\x114\x112"+
		"\x3\x2\x2\x2\x114\x113\x3\x2\x2\x2\x115\x11\x3\x2\x2\x2\x116\x117\aO\x2"+
		"\x2\x117\x118\a\xE\x2\x2\x118\x11A\aO\x2\x2\x119\x11B\x5\x14\v\x2\x11A"+
		"\x119\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11C\x11A"+
		"\x3\x2\x2\x2\x11D\x11E\x3\x2\x2\x2\x11E\x11F\aP\x2\x2\x11F\x120\aP\x2"+
		"\x2\x120\x124\x3\x2\x2\x2\x121\x124\x5\x16\f\x2\x122\x124\x5\x18\r\x2"+
		"\x123\x116\x3\x2\x2\x2\x123\x121\x3\x2\x2\x2\x123\x122\x3\x2\x2\x2\x124"+
		"\x13\x3\x2\x2\x2\x125\x126\aO\x2\x2\x126\x127\x5z>\x2\x127\x128\x5\x12"+
		"\n\x2\x128\x129\aP\x2\x2\x129\x132\x3\x2\x2\x2\x12A\x132\x5\x12\n\x2\x12B"+
		"\x12C\aO\x2\x2\x12C\x12D\x5z>\x2\x12D\x12E\x5\xE\b\x2\x12E\x12F\aP\x2"+
		"\x2\x12F\x132\x3\x2\x2\x2\x130\x132\x5\xE\b\x2\x131\x125\x3\x2\x2\x2\x131"+
		"\x12A\x3\x2\x2\x2\x131\x12B\x3\x2\x2\x2\x131\x130\x3\x2\x2\x2\x132\x15"+
		"\x3\x2\x2\x2\x133\x134\aO\x2\x2\x134\x135\t\x4\x2\x2\x135\x136\x5l\x37"+
		"\x2\x136\x13B\x5\x2\x2\x2\x137\x13C\x5\x14\v\x2\x138\x13C\x5z>\x2\x139"+
		"\x13C\x5N(\x2\x13A\x13C\x5H%\x2\x13B\x137\x3\x2\x2\x2\x13B\x138\x3\x2"+
		"\x2\x2\x13B\x139\x3\x2\x2\x2\x13B\x13A\x3\x2\x2\x2\x13C\x13D\x3\x2\x2"+
		"\x2\x13D\x13E\aP\x2\x2\x13E\x17\x3\x2\x2\x2\x13F\x140\aO\x2\x2\x140\x141"+
		"\a\x11\x2\x2\x141\x142\x5j\x36\x2\x142\x146\x5\x2\x2\x2\x143\x147\x5\x10"+
		"\t\x2\x144\x147\x5\xE\b\x2\x145\x147\x5\x14\v\x2\x146\x143\x3\x2\x2\x2"+
		"\x146\x144\x3\x2\x2\x2\x146\x145\x3\x2\x2\x2\x147\x148\x3\x2\x2\x2\x148"+
		"\x149\aP\x2\x2\x149\x19\x3\x2\x2\x2\x14A\x14B\aO\x2\x2\x14B\x14C\a\x12"+
		"\x2\x2\x14C\x14D\x5j\x36\x2\x14D\x14E\x5\x2\x2\x2\x14E\x14F\aP\x2\x2\x14F"+
		"\x1B\x3\x2\x2\x2\x150\x151\aO\x2\x2\x151\x152\a\x13\x2\x2\x152\x155\a"+
		"\x14\x2\x2\x153\x156\x5\x2\x2\x2\x154\x156\x5\xA2R\x2\x155\x153\x3\x2"+
		"\x2\x2\x155\x154\x3\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x158\aP\x2\x2"+
		"\x158\x1D\x3\x2\x2\x2\x159\x15A\aO\x2\x2\x15A\x15B\a\x13\x2\x2\x15B\x15D"+
		"\a\x15\x2\x2\x15C\x15E\x5$\x13\x2\x15D\x15C\x3\x2\x2\x2\x15E\x15F\x3\x2"+
		"\x2\x2\x15F\x160\x3\x2\x2\x2\x15F\x15D\x3\x2\x2\x2\x160\x161\x3\x2\x2"+
		"\x2\x161\x162\aP\x2\x2\x162\x1F\x3\x2\x2\x2\x163\x164\a\x13\x2\x2\x164"+
		"\x165\a\x16\x2\x2\x165\x166\x5N(\x2\x166\x167\x5\"\x12\x2\x167!\x3\x2"+
		"\x2\x2\x168\x169\aO\x2\x2\x169\x16B\a\x16\x2\x2\x16A\x16C\x5&\x14\x2\x16B"+
		"\x16A\x3\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16D\x16B"+
		"\x3\x2\x2\x2\x16E\x16F\x3\x2\x2\x2\x16F\x170\aP\x2\x2\x170#\x3\x2\x2\x2"+
		"\x171\x176\aO\x2\x2\x172\x173\aM\x2\x2\x173\x175\a\x17\x2\x2\x174\x172"+
		"\x3\x2\x2\x2\x175\x178\x3\x2\x2\x2\x176\x177\x3\x2\x2\x2\x176\x174\x3"+
		"\x2\x2\x2\x177\x179\x3\x2\x2\x2\x178\x176\x3\x2\x2\x2\x179\x17D\aM\x2"+
		"\x2\x17A\x17C\x5$\x13\x2\x17B\x17A\x3\x2\x2\x2\x17C\x17F\x3\x2\x2\x2\x17D"+
		"\x17E\x3\x2\x2\x2\x17D\x17B\x3\x2\x2\x2\x17E\x180\x3\x2\x2\x2\x17F\x17D"+
		"\x3\x2\x2\x2\x180\x181\aP\x2\x2\x181%\x3\x2\x2\x2\x182\x183\aO\x2\x2\x183"+
		"\x184\x5\x2\x2\x2\x184\x185\aP\x2\x2\x185\x199\x3\x2\x2\x2\x186\x18C\a"+
		"O\x2\x2\x187\x188\x5\xA6T\x2\x188\x189\a\x17\x2\x2\x189\x18B\x3\x2\x2"+
		"\x2\x18A\x187\x3\x2\x2\x2\x18B\x18E\x3\x2\x2\x2\x18C\x18D\x3\x2\x2\x2"+
		"\x18C\x18A\x3\x2\x2\x2\x18D\x18F\x3\x2\x2\x2\x18E\x18C\x3\x2\x2\x2\x18F"+
		"\x193\x5\xA6T\x2\x190\x192\x5&\x14\x2\x191\x190\x3\x2\x2\x2\x192\x195"+
		"\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x193\x191\x3\x2\x2\x2\x194\x196\x3"+
		"\x2\x2\x2\x195\x193\x3\x2\x2\x2\x196\x197\aP\x2\x2\x197\x199\x3\x2\x2"+
		"\x2\x198\x182\x3\x2\x2\x2\x198\x186\x3\x2\x2\x2\x199\'\x3\x2\x2\x2\x19A"+
		"\x19B\a\x18\x2\x2\x19B\x19C\x5J&\x2\x19C\x19E\aO\x2\x2\x19D\x19F\x5*\x16"+
		"\x2\x19E\x19D\x3\x2\x2\x2\x19F\x1A0\x3\x2\x2\x2\x1A0\x1A1\x3\x2\x2\x2"+
		"\x1A0\x19E\x3\x2\x2\x2\x1A1\x1A2\x3\x2\x2\x2\x1A2\x1A3\aP\x2\x2\x1A3)"+
		"\x3\x2\x2\x2\x1A4\x1A6\aO\x2\x2\x1A5\x1A7\x5,\x17\x2\x1A6\x1A5\x3\x2\x2"+
		"\x2\x1A7\x1A8\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A8\x1A6\x3\x2\x2\x2"+
		"\x1A9\x1AA\x3\x2\x2\x2\x1AA\x1AB\x5\xA2R\x2\x1AB\x1AC\aP\x2\x2\x1AC+\x3"+
		"\x2\x2\x2\x1AD\x1AE\aO\x2\x2\x1AE\x1B4\x5\xA4S\x2\x1AF\x1B0\aO\x2\x2\x1B0"+
		"\x1B1\x5\xA4S\x2\x1B1\x1B2\aP\x2\x2\x1B2\x1B5\x3\x2\x2\x2\x1B3\x1B5\x5"+
		"x=\x2\x1B4\x1AF\x3\x2\x2\x2\x1B4\x1B3\x3\x2\x2\x2\x1B5\x1B6\x3\x2\x2\x2"+
		"\x1B6\x1B7\aP\x2\x2\x1B7-\x3\x2\x2\x2\x1B8\x1B9\a\x19\x2\x2\x1B9\x1BE"+
		"\t\x5\x2\x2\x1BA\x1BF\x5\x64\x33\x2\x1BB\x1BF\a\x1B\x2\x2\x1BC\x1BF\a"+
		"\x1A\x2\x2\x1BD\x1BF\a\x1C\x2\x2\x1BE\x1BA\x3\x2\x2\x2\x1BE\x1BB\x3\x2"+
		"\x2\x2\x1BE\x1BC\x3\x2\x2\x2\x1BE\x1BD\x3\x2\x2\x2\x1BF/\x3\x2\x2\x2\x1C0"+
		"\x1C1\a\x18\x2\x2\x1C1\x1C2\x5H%\x2\x1C2\x1C3\x5\xA2R\x2\x1C3\x31\x3\x2"+
		"\x2\x2\x1C4\x1C5\a\x18\x2\x2\x1C5\x1C6\x5L\'\x2\x1C6\x1C7\x5\xA4S\x2\x1C7"+
		"\x33\x3\x2\x2\x2\x1C8\x1C9\a\x1D\x2\x2\x1C9\x1CA\x5H%\x2\x1CA\x1CB\x5"+
		"\xA2R\x2\x1CB\x35\x3\x2\x2\x2\x1CC\x1CD\a\x1E\x2\x2\x1CD\x1CE\x5H%\x2"+
		"\x1CE\x1CF\x5\xA2R\x2\x1CF\x37\x3\x2\x2\x2\x1D0\x1D1\a\x1F\x2\x2\x1D1"+
		"\x1D2\x5\x44#\x2\x1D2\x1D3\x5\x44#\x2\x1D3\x39\x3\x2\x2\x2\x1D4\x1D5\a"+
		" \x2\x2\x1D5\x1D6\x5\x44#\x2\x1D6\x1D7\x5\x44#\x2\x1D7;\x3\x2\x2\x2\x1D8"+
		"\x1D9\a!\x2\x2\x1D9\x1DA\x5\x44#\x2\x1DA=\x3\x2\x2\x2\x1DB\x1DC\a\"\x2"+
		"\x2\x1DC\x1DD\x5N(\x2\x1DD?\x3\x2\x2\x2\x1DE\x1DF\a#\x2\x2\x1DF\x1E0\a"+
		"$\x2\x2\x1E0\x41\x3\x2\x2\x2\x1E1\x1E2\a%\x2\x2\x1E2\x1E3\x5\xA2R\x2\x1E3"+
		"\x1E4\x5\xE\b\x2\x1E4\x1EC\x3\x2\x2\x2\x1E5\x1E6\a%\x2\x2\x1E6\x1E7\a"+
		"\x10\x2\x2\x1E7\x1E8\aO\x2\x2\x1E8\x1E9\x5\x38\x1D\x2\x1E9\x1EA\aP\x2"+
		"\x2\x1EA\x1EC\x3\x2\x2\x2\x1EB\x1E1\x3\x2\x2\x2\x1EB\x1E5\x3\x2\x2\x2"+
		"\x1EC\x43\x3\x2\x2\x2\x1ED\x1FB\x5\x2\x2\x2\x1EE\x1FB\x5\x92J\x2\x1EF"+
		"\x1FB\x5\x94K\x2\x1F0\x1FB\x5\x46$\x2\x1F1\x1F5\aO\x2\x2\x1F2\x1F6\a&"+
		"\x2\x2\x1F3\x1F6\a\'\x2\x2\x1F4\x1F6\x5\xA2R\x2\x1F5\x1F2\x3\x2\x2\x2"+
		"\x1F5\x1F3\x3\x2\x2\x2\x1F5\x1F4\x3\x2\x2\x2\x1F6\x1F7\x3\x2\x2\x2\x1F7"+
		"\x1F8\x5N(\x2\x1F8\x1F9\aP\x2\x2\x1F9\x1FB\x3\x2\x2\x2\x1FA\x1ED\x3\x2"+
		"\x2\x2\x1FA\x1EE\x3\x2\x2\x2\x1FA\x1EF\x3\x2\x2\x2\x1FA\x1F0\x3\x2\x2"+
		"\x2\x1FA\x1F1\x3\x2\x2\x2\x1FB\x45\x3\x2\x2\x2\x1FC\x1FD\aO\x2\x2\x1FD"+
		"\x1FE\a(\x2\x2\x1FE\x1FF\x5\x44#\x2\x1FF\x200\aP\x2\x2\x200G\x3\x2\x2"+
		"\x2\x201\x205\aO\x2\x2\x202\x206\x5\x2\x2\x2\x203\x206\a\x4\x2\x2\x204"+
		"\x206\x5\\/\x2\x205\x202\x3\x2\x2\x2\x205\x203\x3\x2\x2\x2\x205\x204\x3"+
		"\x2\x2\x2\x206\x207\x3\x2\x2\x2\x207\x208\a)\x2\x2\x208\x209\x5\xA4S\x2"+
		"\x209\x20A\aP\x2\x2\x20AI\x3\x2\x2\x2\x20B\x20F\aO\x2\x2\x20C\x210\x5"+
		"\x2\x2\x2\x20D\x210\a\x4\x2\x2\x20E\x210\x5\\/\x2\x20F\x20C\x3\x2\x2\x2"+
		"\x20F\x20D\x3\x2\x2\x2\x20F\x20E\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211"+
		"\x212\a*\x2\x2\x212\x213\x5\xA4S\x2\x213\x214\aP\x2\x2\x214K\x3\x2\x2"+
		"\x2\x215\x219\aO\x2\x2\x216\x21A\x5\x2\x2\x2\x217\x21A\a\x4\x2\x2\x218"+
		"\x21A\x5\\/\x2\x219\x216\x3\x2\x2\x2\x219\x217\x3\x2\x2\x2\x219\x218\x3"+
		"\x2\x2\x2\x21A\x21B\x3\x2\x2\x2\x21B\x21C\a+\x2\x2\x21C\x21D\x5\xA4S\x2"+
		"\x21D\x21E\aP\x2\x2\x21EM\x3\x2\x2\x2\x21F\x22D\x5\x2\x2\x2\x220\x22D"+
		"\x5\x98M\x2\x221\x22D\x5\x9AN\x2\x222\x22D\x5\x9CO\x2\x223\x22D\x5\x96"+
		"L\x2\x224\x22D\x5t;\x2\x225\x226\aO\x2\x2\x226\x227\x5X-\x2\x227\x228"+
		"\x5Z.\x2\x228\x229\x5\xA4S\x2\x229\x22A\aP\x2\x2\x22A\x22D\x3\x2\x2\x2"+
		"\x22B\x22D\x5P)\x2\x22C\x21F\x3\x2\x2\x2\x22C\x220\x3\x2\x2\x2\x22C\x221"+
		"\x3\x2\x2\x2\x22C\x222\x3\x2\x2\x2\x22C\x223\x3\x2\x2\x2\x22C\x224\x3"+
		"\x2\x2\x2\x22C\x225\x3\x2\x2\x2\x22C\x22B\x3\x2\x2\x2\x22DO\x3\x2\x2\x2"+
		"\x22E\x232\aO\x2\x2\x22F\x233\a&\x2\x2\x230\x233\a\'\x2\x2\x231\x233\x5"+
		"\xA2R\x2\x232\x22F\x3\x2\x2\x2\x232\x230\x3\x2\x2\x2\x232\x231\x3\x2\x2"+
		"\x2\x233\x234\x3\x2\x2\x2\x234\x235\x5R*\x2\x235\x236\aP\x2\x2\x236Q\x3"+
		"\x2\x2\x2\x237\x23A\x5T+\x2\x238\x23A\x5V,\x2\x239\x237\x3\x2\x2\x2\x239"+
		"\x238\x3\x2\x2\x2\x23AS\x3\x2\x2\x2\x23B\x23C\aO\x2\x2\x23C\x23D\a,\x2"+
		"\x2\x23D\x23E\x5\xA2R\x2\x23E\x23F\x5N(\x2\x23F\x240\a-\x2\x2\x240\x241"+
		"\x5J&\x2\x241\x242\aP\x2\x2\x242U\x3\x2\x2\x2\x243\x244\aO\x2\x2\x244"+
		"\x24B\a.\x2\x2\x245\x24C\x5\x16\f\x2\x246\x248\x5N(\x2\x247\x246\x3\x2"+
		"\x2\x2\x248\x249\x3\x2\x2\x2\x249\x24A\x3\x2\x2\x2\x249\x247\x3\x2\x2"+
		"\x2\x24A\x24C\x3\x2\x2\x2\x24B\x245\x3\x2\x2\x2\x24B\x247\x3\x2\x2\x2"+
		"\x24C\x24D\x3\x2\x2\x2\x24D\x24E\x5\xA4S\x2\x24E\x24F\aP\x2\x2\x24FW\x3"+
		"\x2\x2\x2\x250\x254\x5\x2\x2\x2\x251\x254\a\x4\x2\x2\x252\x254\x5^\x30"+
		"\x2\x253\x250\x3\x2\x2\x2\x253\x251\x3\x2\x2\x2\x253\x252\x3\x2\x2\x2"+
		"\x254Y\x3\x2\x2\x2\x255\x256\t\x6\x2\x2\x256[\x3\x2\x2\x2\x257\x25A\x5"+
		"`\x31\x2\x258\x25A\x5^\x30\x2\x259\x257\x3\x2\x2\x2\x259\x258\x3\x2\x2"+
		"\x2\x25A]\x3\x2\x2\x2\x25B\x25C\aO\x2\x2\x25C\x25D\x5\x62\x32\x2\x25D"+
		"\x25E\a\a\x2\x2\x25E\x25F\aP\x2\x2\x25F\x262\x3\x2\x2\x2\x260\x262\x5"+
		"\x64\x33\x2\x261\x25B\x3\x2\x2\x2\x261\x260\x3\x2\x2\x2\x262_\x3\x2\x2"+
		"\x2\x263\x264\aO\x2\x2\x264\x265\x5\x62\x32\x2\x265\x266\a\b\x2\x2\x266"+
		"\x267\aP\x2\x2\x267\x26A\x3\x2\x2\x2\x268\x26A\x5\x66\x34\x2\x269\x263"+
		"\x3\x2\x2\x2\x269\x268\x3\x2\x2\x2\x26A\x61\x3\x2\x2\x2\x26B\x270\x5\xA2"+
		"R\x2\x26C\x270\a\x1C\x2\x2\x26D\x270\a\x1A\x2\x2\x26E\x270\a\x1B\x2\x2"+
		"\x26F\x26B\x3\x2\x2\x2\x26F\x26C\x3\x2\x2\x2\x26F\x26D\x3\x2\x2\x2\x26F"+
		"\x26E\x3\x2\x2\x2\x270\x63\x3\x2\x2\x2\x271\x272\aO\x2\x2\x272\x273\a"+
		"\x33\x2\x2\x273\x274\x5\x44#\x2\x274\x275\aP\x2\x2\x275\x65\x3\x2\x2\x2"+
		"\x276\x277\aO\x2\x2\x277\x278\a\b\x2\x2\x278\x279\x5^\x30\x2\x279\x27A"+
		"\aP\x2\x2\x27Ag\x3\x2\x2\x2\x27B\x27C\aO\x2\x2\x27C\x27D\a\x34\x2\x2\x27D"+
		"\x27E\t\x2\x2\x2\x27E\x27F\aP\x2\x2\x27Fi\x3\x2\x2\x2\x280\x286\x5\x2"+
		"\x2\x2\x281\x286\x5\xA2R\x2\x282\x286\x5z>\x2\x283\x286\x5\xA4S\x2\x284"+
		"\x286\x5l\x37\x2\x285\x280\x3\x2\x2\x2\x285\x281\x3\x2\x2\x2\x285\x282"+
		"\x3\x2\x2\x2\x285\x283\x3\x2\x2\x2\x285\x284\x3\x2\x2\x2\x286k\x3\x2\x2"+
		"\x2\x287\x292\x5\x2\x2\x2\x288\x292\x5N(\x2\x289\x292\x5n\x38\x2\x28A"+
		"\x292\x5p\x39\x2\x28B\x292\a\a\x2\x2\x28C\x292\a\b\x2\x2\x28D\x292\x5"+
		"`\x31\x2\x28E\x292\x5h\x35\x2\x28F\x292\x5r:\x2\x290\x292\x5t;\x2\x291"+
		"\x287\x3\x2\x2\x2\x291\x288\x3\x2\x2\x2\x291\x289\x3\x2\x2\x2\x291\x28A"+
		"\x3\x2\x2\x2\x291\x28B\x3\x2\x2\x2\x291\x28C\x3\x2\x2\x2\x291\x28D\x3"+
		"\x2\x2\x2\x291\x28E\x3\x2\x2\x2\x291\x28F\x3\x2\x2\x2\x291\x290\x3\x2"+
		"\x2\x2\x292m\x3\x2\x2\x2\x293\x299\aO\x2\x2\x294\x295\x5\xA6T\x2\x295"+
		"\x296\a\x17\x2\x2\x296\x298\x3\x2\x2\x2\x297\x294\x3\x2\x2\x2\x298\x29B"+
		"\x3\x2\x2\x2\x299\x29A\x3\x2\x2\x2\x299\x297\x3\x2\x2\x2\x29A\x29C\x3"+
		"\x2\x2\x2\x29B\x299\x3\x2\x2\x2\x29C\x29D\x5\xA6T\x2\x29D\x29E\aP\x2\x2"+
		"\x29Eo\x3\x2\x2\x2\x29F\x2A3\x5R*\x2\x2A0\x2A3\x5\x16\f\x2\x2A1\x2A3\x5"+
		"\x18\r\x2\x2A2\x29F\x3\x2\x2\x2\x2A2\x2A0\x3\x2\x2\x2\x2A2\x2A1\x3\x2"+
		"\x2\x2\x2A3q\x3\x2\x2\x2\x2A4\x2A5\aO\x2\x2\x2A5\x2A6\a\x35\x2\x2\x2A6"+
		"\x2A7\x5\xA2R\x2\x2A7\x2A8\a\x36\x2\x2\x2A8\x2A9\x5\xA2R\x2\x2A9\x2AA"+
		"\aP\x2\x2\x2AAs\x3\x2\x2\x2\x2AB\x2AC\aO\x2\x2\x2AC\x2AD\a\x37\x2\x2\x2AD"+
		"\x2AE\x5l\x37\x2\x2AE\x2AF\x5\x2\x2\x2\x2AF\x2B0\x5z>\x2\x2B0\x2B1\aP"+
		"\x2\x2\x2B1u\x3\x2\x2\x2\x2B2\x2B3\aK\x2\x2\x2B3\x2B4\x5x=\x2\x2B4\x2B5"+
		"\x5x=\x2\x2B5w\x3\x2\x2\x2\x2B6\x2BE\x5\xA4S\x2\x2B7\x2B8\aO\x2\x2\x2B8"+
		"\x2B9\a\x38\x2\x2\x2B9\x2BA\x5\xA4S\x2\x2BA\x2BB\x5\x44#\x2\x2BB\x2BC"+
		"\aP\x2\x2\x2BC\x2BE\x3\x2\x2\x2\x2BD\x2B6\x3\x2\x2\x2\x2BD\x2B7\x3\x2"+
		"\x2\x2\x2BEy\x3\x2\x2\x2\x2BF\x2DA\aO\x2\x2\x2C0\x2C1\aI\x2\x2\x2C1\x2C3"+
		"\x5z>\x2\x2C2\x2C4\x5z>\x2\x2C3\x2C2\x3\x2\x2\x2\x2C4\x2C5\x3\x2\x2\x2"+
		"\x2C5\x2C6\x3\x2\x2\x2\x2C5\x2C3\x3\x2\x2\x2\x2C6\x2DB\x3\x2\x2\x2\x2C7"+
		"\x2C8\x5|?\x2\x2C8\x2C9\x5\xA2R\x2\x2C9\x2CA\x5\xA2R\x2\x2CA\x2DB\x3\x2"+
		"\x2\x2\x2CB\x2DB\x5v<\x2\x2CC\x2CD\aK\x2\x2\x2CD\x2CE\x5\x44#\x2\x2CE"+
		"\x2CF\x5\x44#\x2\x2CF\x2DB\x3\x2\x2\x2\x2D0\x2D1\aL\x2\x2\x2D1\x2DB\x5"+
		"z>\x2\x2D2\x2D3\aK\x2\x2\x2D3\x2D4\x5^\x30\x2\x2D4\x2D5\x5^\x30\x2\x2D5"+
		"\x2DB\x3\x2\x2\x2\x2D6\x2D7\aK\x2\x2\x2D7\x2D8\x5`\x31\x2\x2D8\x2D9\x5"+
		"`\x31\x2\x2D9\x2DB\x3\x2\x2\x2\x2DA\x2C0\x3\x2\x2\x2\x2DA\x2C7\x3\x2\x2"+
		"\x2\x2DA\x2CB\x3\x2\x2\x2\x2DA\x2CC\x3\x2\x2\x2\x2DA\x2D0\x3\x2\x2\x2"+
		"\x2DA\x2D2\x3\x2\x2\x2\x2DA\x2D6\x3\x2\x2\x2\x2DB\x2DC\x3\x2\x2\x2\x2DC"+
		"\x2DD\aP\x2\x2\x2DD\x2E0\x3\x2\x2\x2\x2DE\x2E0\x5\x16\f\x2\x2DF\x2BF\x3"+
		"\x2\x2\x2\x2DF\x2DE\x3\x2\x2\x2\x2E0{\x3\x2\x2\x2\x2E1\x2E2\t\a\x2\x2"+
		"\x2E2}\x3\x2\x2\x2\x2E3\x2E4\aO\x2\x2\x2E4\x2E5\a\x39\x2\x2\x2E5\x2E6"+
		"\x5\xA2R\x2\x2E6\x2E7\x5\xA2R\x2\x2E7\x2E8\aP\x2\x2\x2E8\x7F\x3\x2\x2"+
		"\x2\x2E9\x2EA\aO\x2\x2\x2EA\x2EB\a:\x2\x2\x2EB\x2EC\x5\xA2R\x2\x2EC\x2ED"+
		"\x5\xA2R\x2\x2ED\x2EE\aP\x2\x2\x2EE\x81\x3\x2\x2\x2\x2EF\x2F0\aO\x2\x2"+
		"\x2F0\x2F1\a;\x2\x2\x2F1\x2F2\x5\xA2R\x2\x2F2\x2F3\x5\xA2R\x2\x2F3\x2F4"+
		"\aP\x2\x2\x2F4\x83\x3\x2\x2\x2\x2F5\x2F6\aO\x2\x2\x2F6\x2F7\a<\x2\x2\x2F7"+
		"\x2F8\x5\xA2R\x2\x2F8\x2F9\x5\xA2R\x2\x2F9\x2FA\aP\x2\x2\x2FA\x85\x3\x2"+
		"\x2\x2\x2FB\x2FC\aO\x2\x2\x2FC\x2FD\a=\x2\x2\x2FD\x2FE\x5\xA2R\x2\x2FE"+
		"\x2FF\x5\xA2R\x2\x2FF\x300\aP\x2\x2\x300\x87\x3\x2\x2\x2\x301\x302\aO"+
		"\x2\x2\x302\x303\a>\x2\x2\x303\x304\x5\xA2R\x2\x304\x305\x5\xA2R\x2\x305"+
		"\x306\aP\x2\x2\x306\x89\x3\x2\x2\x2\x307\x308\aO\x2\x2\x308\x309\a?\x2"+
		"\x2\x309\x30A\x5\xA2R\x2\x30A\x30B\aP\x2\x2\x30B\x8B\x3\x2\x2\x2\x30C"+
		"\x30D\aO\x2\x2\x30D\x30E\a@\x2\x2\x30E\x30F\x5\xA2R\x2\x30F\x310\aP\x2"+
		"\x2\x310\x8D\x3\x2\x2\x2\x311\x312\aO\x2\x2\x312\x313\a\x41\x2\x2\x313"+
		"\x314\x5\xA2R\x2\x314\x316\a\x36\x2\x2\x315\x317\x5\xA2R\x2\x316\x315"+
		"\x3\x2\x2\x2\x316\x317\x3\x2\x2\x2\x317\x318\x3\x2\x2\x2\x318\x319\aP"+
		"\x2\x2\x319\x8F\x3\x2\x2\x2\x31A\x31B\aO\x2\x2\x31B\x31F\a\x42\x2\x2\x31C"+
		"\x320\x5\x2\x2\x2\x31D\x320\x5N(\x2\x31E\x320\x5R*\x2\x31F\x31C\x3\x2"+
		"\x2\x2\x31F\x31D\x3\x2\x2\x2\x31F\x31E\x3\x2\x2\x2\x320\x321\x3\x2\x2"+
		"\x2\x321\x322\aP\x2\x2\x322\x91\x3\x2\x2\x2\x323\x324\aO\x2\x2\x324\x325"+
		"\a\v\x2\x2\x325\x326\x5N(\x2\x326\x327\a-\x2\x2\x327\x328\x5J&\x2\x328"+
		"\x329\aP\x2\x2\x329\x93\x3\x2\x2\x2\x32A\x32B\aO\x2\x2\x32B\x32C\a\n\x2"+
		"\x2\x32C\x32D\x5N(\x2\x32D\x32E\a-\x2\x2\x32E\x32F\x5J&\x2\x32F\x330\a"+
		"P\x2\x2\x330\x95\x3\x2\x2\x2\x331\x332\aO\x2\x2\x332\x333\a\x43\x2\x2"+
		"\x333\x334\x5N(\x2\x334\x335\a-\x2\x2\x335\x336\x5J&\x2\x336\x337\aP\x2"+
		"\x2\x337\x97\x3\x2\x2\x2\x338\x339\aO\x2\x2\x339\x340\a\x44\x2\x2\x33A"+
		"\x341\x5\x16\f\x2\x33B\x33D\x5N(\x2\x33C\x33B\x3\x2\x2\x2\x33D\x33E\x3"+
		"\x2\x2\x2\x33E\x33F\x3\x2\x2\x2\x33E\x33C\x3\x2\x2\x2\x33F\x341\x3\x2"+
		"\x2\x2\x340\x33A\x3\x2\x2\x2\x340\x33C\x3\x2\x2\x2\x341\x342\x3\x2\x2"+
		"\x2\x342\x343\aP\x2\x2\x343\x99\x3\x2\x2\x2\x344\x345\aO\x2\x2\x345\x34C"+
		"\a\x45\x2\x2\x346\x34D\x5\x16\f\x2\x347\x349\x5N(\x2\x348\x347\x3\x2\x2"+
		"\x2\x349\x34A\x3\x2\x2\x2\x34A\x34B\x3\x2\x2\x2\x34A\x348\x3\x2\x2\x2"+
		"\x34B\x34D\x3\x2\x2\x2\x34C\x346\x3\x2\x2\x2\x34C\x348\x3\x2\x2\x2\x34D"+
		"\x354\x3\x2\x2\x2\x34E\x355\x5\x16\f\x2\x34F\x351\x5N(\x2\x350\x34F\x3"+
		"\x2\x2\x2\x351\x352\x3\x2\x2\x2\x352\x353\x3\x2\x2\x2\x352\x350\x3\x2"+
		"\x2\x2\x353\x355\x3\x2\x2\x2\x354\x34E\x3\x2\x2\x2\x354\x350\x3\x2\x2"+
		"\x2\x355\x356\x3\x2\x2\x2\x356\x357\aP\x2\x2\x357\x9B\x3\x2\x2\x2\x358"+
		"\x359\aO\x2\x2\x359\x360\a\x46\x2\x2\x35A\x361\x5\x16\f\x2\x35B\x35D\x5"+
		"N(\x2\x35C\x35B\x3\x2\x2\x2\x35D\x35E\x3\x2\x2\x2\x35E\x35F\x3\x2\x2\x2"+
		"\x35E\x35C\x3\x2\x2\x2\x35F\x361\x3\x2\x2\x2\x360\x35A\x3\x2\x2\x2\x360"+
		"\x35C\x3\x2\x2\x2\x361\x368\x3\x2\x2\x2\x362\x369\x5\x16\f\x2\x363\x365"+
		"\x5N(\x2\x364\x363\x3\x2\x2\x2\x365\x366\x3\x2\x2\x2\x366\x367\x3\x2\x2"+
		"\x2\x366\x364\x3\x2\x2\x2\x367\x369\x3\x2\x2\x2\x368\x362\x3\x2\x2\x2"+
		"\x368\x364\x3\x2\x2\x2\x369\x36A\x3\x2\x2\x2\x36A\x36B\aP\x2\x2\x36B\x9D"+
		"\x3\x2\x2\x2\x36C\x36D\aO\x2\x2\x36D\x36E\aG\x2\x2\x36E\x36F\x5N(\x2\x36F"+
		"\x370\a-\x2\x2\x370\x371\x5J&\x2\x371\x372\aP\x2\x2\x372\x9F\x3\x2\x2"+
		"\x2\x373\x374\aO\x2\x2\x374\x375\aH\x2\x2\x375\x376\x5\x44#\x2\x376\x377"+
		"\a-\x2\x2\x377\x378\x5J&\x2\x378\x379\aP\x2\x2\x379\xA1\x3\x2\x2\x2\x37A"+
		"\x38E\x5\x2\x2\x2\x37B\x38E\x5\x90I\x2\x37C\x38E\x5\x80\x41\x2\x37D\x38E"+
		"\x5\x82\x42\x2\x37E\x38E\x5\x84\x43\x2\x37F\x38E\x5~@\x2\x380\x38E\x5"+
		"\x86\x44\x2\x381\x38E\x5\x88\x45\x2\x382\x38E\x5\x8A\x46\x2\x383\x38E"+
		"\x5\x8CG\x2\x384\x38E\x5\x8EH\x2\x385\x38E\x5\x9EP\x2\x386\x38E\x5H%\x2"+
		"\x387\x38E\x5\xA0Q\x2\x388\x38A\aM\x2\x2\x389\x388\x3\x2\x2\x2\x38A\x38B"+
		"\x3\x2\x2\x2\x38B\x389\x3\x2\x2\x2\x38B\x38C\x3\x2\x2\x2\x38C\x38E\x3"+
		"\x2\x2\x2\x38D\x37A\x3\x2\x2\x2\x38D\x37B\x3\x2\x2\x2\x38D\x37C\x3\x2"+
		"\x2\x2\x38D\x37D\x3\x2\x2\x2\x38D\x37E\x3\x2\x2\x2\x38D\x37F\x3\x2\x2"+
		"\x2\x38D\x380\x3\x2\x2\x2\x38D\x381\x3\x2\x2\x2\x38D\x382\x3\x2\x2\x2"+
		"\x38D\x383\x3\x2\x2\x2\x38D\x384\x3\x2\x2\x2\x38D\x385\x3\x2\x2\x2\x38D"+
		"\x386\x3\x2\x2\x2\x38D\x387\x3\x2\x2\x2\x38D\x389\x3\x2\x2\x2\x38E\xA3"+
		"\x3\x2\x2\x2\x38F\x393\x5\xA6T\x2\x390\x393\x5L\'\x2\x391\x393\x5\x2\x2"+
		"\x2\x392\x38F\x3\x2\x2\x2\x392\x390\x3\x2\x2\x2\x392\x391\x3\x2\x2\x2"+
		"\x393\xA5\x3\x2\x2\x2\x394\x396\aN\x2\x2\x395\x394\x3\x2\x2\x2\x396\x397"+
		"\x3\x2\x2\x2\x397\x395\x3\x2\x2\x2\x397\x398\x3\x2\x2\x2\x398\xA7\x3\x2"+
		"\x2\x2H\xB0\xB6\xB8\xC1\xC6\xCC\xD6\xD8\xF5\xFA\x102\x10D\x114\x11C\x123"+
		"\x131\x13B\x146\x155\x15F\x16D\x176\x17D\x18C\x193\x198\x1A0\x1A8\x1B4"+
		"\x1BE\x1EB\x1F5\x1FA\x205\x20F\x219\x22C\x232\x239\x249\x24B\x253\x259"+
		"\x261\x269\x26F\x285\x291\x299\x2A2\x2BD\x2C5\x2DA\x2DF\x316\x31F\x33E"+
		"\x340\x34A\x34C\x352\x354\x35E\x360\x366\x368\x38B\x38D\x392\x397";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
